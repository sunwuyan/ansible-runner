---

- name: "packages: Install FreeBSD packages"
  block:
    - name: "packages: Install Ansible Runner packages FreeBSD"
      pkgng:
        name: "{{ item.name }}"
      loop: "{{ ar_packages }}"
      register: result
      until: result is succeeded
      retries: "{{ freebsd_install_retries }}"
      delay: "{{ freebsd_install_delay }}"

    - name: "packages: Debug FreeBSD packages"
      when: ar_debug|bool
      debug:
        var: result

  when: (ansible_os_family == "FreeBSD") and
        (freebsd_install_method|lower == "packages") and
        ar_pkg|bool

- name: "packages: Install FreeBSD ports"
  block:
    - name: "packages: Install Ansible Runner ports FreeBSD"
      portinstall:
        name: "{{ item.name }}"
        use_packages: "{{ freebsd_use_packages }}"
      loop: "{{ ar_packages }}"
      register: result
      until: result is succeeded
      retries: "{{ freebsd_install_retries }}"
      delay: "{{ freebsd_install_delay }}"

    - name: "packages: Debug FreeBSD ports"
      when: ar_debug|bool
      debug:
        var: result

  when: (ansible_os_family == "FreeBSD") and
        (freebsd_install_method|lower == "ports") and
        ar_pkg|bool

- name: "packages: Install Linux packages"
  block:
    - name: "packages: Install Ansible Runner packages Linux"
      package:
        name: "{{ item.name }}"
      loop: "{{ ar_packages }}"
      register: result
      until: result is succeeded
      retries: "{{ linux_install_retries }}"
      delay: "{{ linux_install_delay }}"

    - name: "packages: Debug Linux"
      when: ar_debug|bool
      debug:
        var: result

  when: ((ansible_os_family == "RedHat") or
         (ansible_os_family == "Debian")) and
        ar_pkg|bool

- name: "packages: Install pip"
  block:
    - name: "packages: Install Ansible Runner pip packages for {{ ar_owner }}"
      become_user: "{{ ar_owner }}"
      become: true
      changed_when: false  # Note 1.
      pip:
        name: "{{ item.name }}"
        executable: "{{ ar_pip_executable }}"
        version: "{{ item.version|default(omit) }}"
        state: "{{ item.state|default(omit) }}"
        extra_args: "{{ pip_extraagrs|default(omit) }}"
      loop: "{{ ar_packages }}"
      register: result
      until: result is succeeded
      retries: "{{ pip_install_retries }}"
      delay: "{{ pip_install_delay }}"

    - name: "packages: Debug pip packages"
      when: ar_debug|bool
      debug:
        var: result

    - name: "packages: Install Ansible Runner pip requirements for {{ ar_owner }}"
      become_user: "{{ ar_owner }}"
      become: true
      changed_when: false  # Note 1.
      pip:
        requirements: "{{ pip_requirements|default(omit) }}"
        executable: "{{ ar_pip_executable }}"
        extra_args: "{{ pip_extraagrs|default(omit) }}"
      register: result
      until: result is succeeded
      retries: "{{ pip_install_retries }}"
      delay: "{{ pip_install_delay }}"
      when: pip_requirements is defined

    - name: "packages: Debug pip requirements"
      when: ar_debug|bool
      debug:
        var: result

  when: ar_pip|bool

# Note 1.
# The pip module isn't always idempotent #28952
# https://github.com/ansible/ansible/issues/28952

# EOF
...
